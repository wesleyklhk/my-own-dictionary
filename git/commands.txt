master branch
git init                         //initialize the current directory to be managed by git

git status                       //used to keep track of all added/edited/deleted files in the current directory
                                 //staged:
								 //Files are ready to be committed.
								 //unstaged:
								 //Files with changes that have not been prepared to be committed.
								 //untracked:
								 //Files aren't tracked by Git yet. This usually indicates a newly created file.
								 //deleted:
								 //File has been deleted and is waiting to be removed from Git.
								 
								 
git add <filename>				 //allows you to add file with filename to the staging area

git add '*.txt'

git add -A .					 //add all:
								 //You can also type git add -A . where the dot stands for the current directory, so everything in and beneath it is added. The -A ensures even file deletions are included.
								 //git reset:
								 //You can use git reset <filename> to remove a file or files from the staging area.	
								 //Staging Area:
								 //A place where we can group files together before we "commit" them to Git.
								 //commit
								 //A "commit" is a snapshot of our repository. This way if we ever need to look back at the changes we've made (or if someone else does), we will see a nice timeline of all changes.

git reset octofamily/octodog.txt  //git reset did a great job of unstaging								 
								 
git commit -m "Add cute octocat story"


git log --stat

git log --graph

git diff HEAD// compare difference with head

git diff --staged //compare --staged file

git reset //unstage all files

git reset <file name>//unstage a specific file

git remote add origin https://github.com/try-git/try_git.git          //upload local repository to github server

git push -u origin <branch label>     										  //push the changes u made to the server; <branch label> usually = master

git pull origin <branch label>												  //download changes from github server      

git checkout <commit id or label or a specific file>                                 

git branch <label>                //create new branch

git branch -m <old label> <new label>  //rename branch label; switch to master branch using "git checkout master"; rename master branch to "old-master"; switch to the updated branch using "git checkout v2"; rename this branch to master using "git branch -m v2 master"; u can rename a branch only if u r currently at this branch

git branch -d <label>           //delete a branch

git clone https://github.com/try-git/try_git.git //download code from github

//if need to merge two branch
//first checkout the master branch
git checkout master
//use the following branch
git merge <branch to be merged to master>


git reset --hard <label> //completely remove all staged and unstaged changes to tracked files.



/********************************************READ THIS***************************************************************/
//how to merge local branch?
//lets assume that u already commit ur changes in ur local branch(not master)
//if u want to merge the local branch to another branch, then:
git checkout <another branch>
git merge <local branch>
//if there are conflicts, u may want to find out the list of conflicted files by simply executing the following:
git status

//how to resolve conflict?
//lets say u finish ur task. u want to push ur changes to remote repository. so u do this:
git add -A . //stage all ur changes
git commit -m "some comments" //commit ur changes
git push -u origin <remote branch label> //push ur changes
//lets suppose git push fails due to some changes made by other collaborator. then :
git pull origin <remote branch label>
//both u and the collaborator made changes to the same file resulting conflicted files. If you would like to find out those files, then:
git status
//go to those files and resolve the conflicts. Once thats done, do:
git add -A .
git commit -m "comments"
git push -u origin master <remote branch label>